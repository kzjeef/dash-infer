===========
VLM Support
===========

Qwen VL/AL Model Inference Examples
-----------------------------------

Before read this document, please first read  :doc:`LLM Offline Inference By Python API <../llm/llm_offline_inference_en>` for basic concept and process.


Qwen VL Archtecture
-------------------------
The major different between VL model and LLM model can be depicted from this diagram,from the following model archtecutre of Qwen2 VL, the image embdding will be generate by a Vision Encoder, the text embedding will be generated by the word embedding in LLM model,
and two embedding will merged after word embedding layer based on the picture's position (indentify by the image placeholder token's position).

.. image:: https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen2-VL/qwen2_vl.jpg
   :alt: qwen vl arch
   :align: center
   :width: 50%

AllSpark provide fully support for efficient VL model serving by :
1. Separate the Vision Encoder and LLM model, and they can run concurrently or in different machine.
2. Provide a interface for vision encoder data, with highly optmized code to overwrite the embedding in correct place in LLM model.

Model Inference
---------------
For Multiple media request, like video, audio, image request, user needs to create a ``MultiMediaInfo`` class to provide information for
engine handling those requests.

There are some different between text request and mm request in content and calling sequence:

1. create mutliple media information, specify the type and mm contnet in list of DLPack tensor.
2. set this class to generation config builder
3. you can only use ``start_request_ids`` interface because the special placehold id may not supported by tokenizer.


MultiMediaInfo
==============

The `MultiMediaInfo` class is used to provide multimedia information for certain use cases in text generation tasks. It allows you to set the multimedia type and add multimedia content, such as embeddings or other data relevant to the generation process.

Usage
=====

To use the `MultiMediaInfo` class, you need to create an instance and set the multimedia type using the `set_multimedia_type` method. Then, you can add multimedia content using the `add_multimedia_content` method.

Example
=======

Here's an example of how to use the `MultiMediaInfo` class:

.. code-block:: python

    import torch
    import os
    import allspark

    # Load multimedia content (e.g., embeddings)
    model_path = "path/to/model"

    # image embedding just for example.
    m1 = torch.load(os.path.join(model_path, "emb.pt")).cpu().float()
    dl_list = []
    dl_list.append(torch.utils.dlpack.to_dlpack(m1))

    # Create a MultiMediaInfo instance
    as_extra_embedding_info_0 = allspark.MultiMediaInfo()

    # Add the multimedia content
    as_extra_embedding_info_0.add_multimedia_content("151859", dl_list)

    # Include the MultiMediaInfo instance in the generation config

    gen_cfg_builder = ASGenerationConfigBuilder()
    config = (gen_cfg_builder.do_sample()
          .max_length(512)
          .temperature(0.7)
          .top_k(50)
          .update({"mm_info": as_extra_embedding_info_0})
          .build())

In this example, we first load the multimedia content (embeddings in this case) from a file. We then create a `MultiMediaInfo` instance, and add the multimedia content using the `add_multimedia_content` method. Finally, we add the mm info into generation config, the following step will be same as text requests.

Methods
=======

.. py:class:: MultiMediaInfo

   .. py:method:: add_multimedia_content(identifier: str, content: List[capsule]) -> AsStatus

      Adds multimedia content to the current instance.

      :param str identifier: An identifier for the multimedia content, the id should same as the placeholder id in id inputs.
      :param List[capsule] content: A list of capsules (e.g., DLPack tensors) representing the multimedia content.
      :returns: An `AsStatus` object indicating the status of the operation.

The `MultiMediaInfo` class provides two methods:

- `set_multimedia_type`: Sets the multimedia type for the current instance(derecated)
- `add_multimedia_content`: Adds multimedia content to the current instance, identified by a string identifier and a list of capsules (e.g., DLPack tensors) representing the content.

Both methods return an `AsStatus` object indicating the status of the operation.
